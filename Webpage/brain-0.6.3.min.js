




<!DOCTYPE html>
<html class="   ">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    
    <title>brain/brain-0.6.3.min.js at gh-pages Â· harthur/brain</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <meta property="fb:app_id" content="1401488693436528"/>

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="harthur/brain" name="twitter:title" /><meta content="brain - Neural networks in JavaScript" name="twitter:description" /><meta content="https://avatars1.githubusercontent.com/u/140420?s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars1.githubusercontent.com/u/140420?s=400" property="og:image" /><meta content="harthur/brain" property="og:title" /><meta content="https://github.com/harthur/brain" property="og:url" /><meta content="brain - Neural networks in JavaScript" property="og:description" />

    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035/">
    <link rel="xhr-socket" href="/_sockets" />

    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="86AD3A04:5507:A941EB:5373342F" name="octolytics-dimension-request_id" /><meta content="6542396" name="octolytics-actor-id" /><meta content="JennerF" name="octolytics-actor-login" /><meta content="223b985dd1396bfd461baabe598f7113df6722964fa792188712db1246240c2e" name="octolytics-actor-hash" />
    

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="IpGK7wSxkmSwQwHApZNCWBkWXSDzkFG44fFkRituI3XoWPzNF1Jw7usu9Lepb0Oncw5r12jRtoFy1xIvhjrfmA==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-08eca722f10c5a963656d215e35a809b85c86d1e.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-2dd00e4d2cf7d1f9ae9a7ba0dd87a4eed741de32.css" media="all" rel="stylesheet" type="text/css" />
    


    <meta http-equiv="x-pjax-version" content="8f882ae42120fd172a3d81adab0f2690">

      
  <meta name="description" content="brain - Neural networks in JavaScript" />

  <meta content="140420" name="octolytics-dimension-user_id" /><meta content="harthur" name="octolytics-dimension-user_login" /><meta content="658594" name="octolytics-dimension-repository_id" /><meta content="harthur/brain" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="658594" name="octolytics-dimension-repository_network_root_id" /><meta content="harthur/brain" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/harthur/brain/commits/gh-pages.atom" rel="alternate" title="Recent Commits to brain:gh-pages" type="application/atom+xml" />

  </head>


  <body class="logged_in  env-production windows vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      <div class="header header-logged-in true">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/">
  <span class="mega-octicon octicon-mark-github"></span>
</a>

    
    <a href="/notifications" aria-label="You have no unread notifications" class="notification-indicator tooltipped tooltipped-s" data-hotkey="g n">
        <span class="mail-status all-read"></span>
</a>

      <div class="command-bar js-command-bar  in-repository">
          <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<div class="commandbar">
  <span class="message"></span>
  <input type="text" data-hotkey="s, /" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    data-username="JennerF"
      data-repo="harthur/brain"
      data-branch="gh-pages"
      data-sha="dbe116b681092119a70e6a4a962057b37af5fc2e"
  >
  <div class="display hidden"></div>
</div>

    <input type="hidden" name="nwo" value="harthur/brain" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target" role="button" aria-haspopup="true">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container" aria-hidden="true">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="help tooltipped tooltipped-s" aria-label="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
        <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
            <li><a href="https://gist.github.com">Gist</a></li>
            <li><a href="/blog">Blog</a></li>
          <li><a href="https://help.github.com">Help</a></li>
        </ul>
      </div>

    


  <ul id="user-links">
    <li>
      <a href="/JennerF" class="name">
        <img alt="Jenner Felton" class=" js-avatar" data-user="6542396" height="20" src="https://avatars0.githubusercontent.com/u/6542396?s=140" width="20" /> JennerF
      </a>
    </li>

    <li class="new-menu dropdown-toggle js-menu-container">
      <a href="#" class="js-menu-target tooltipped tooltipped-s" aria-label="Create new...">
        <span class="octicon octicon-plus"></span>
        <span class="dropdown-arrow"></span>
      </a>

      <div class="new-menu-content js-menu-content">
      </div>
    </li>

    <li>
      <a href="/settings/profile" id="account_settings"
        class="tooltipped tooltipped-s"
        aria-label="Account settings ">
        <span class="octicon octicon-tools"></span>
      </a>
    </li>
    <li>
      <form class="logout-form" action="/logout" method="post">
        <button class="sign-out-button tooltipped tooltipped-s" aria-label="Sign out">
          <span class="octicon octicon-log-out"></span>
        </button>
      </form>
    </li>

  </ul>

<div class="js-new-dropdown-contents hidden">
  

<ul class="dropdown-menu">
  <li>
    <a href="/new"><span class="octicon octicon-repo-create"></span> New repository</a>
  </li>
  <li>
    <a href="/organizations/new"><span class="octicon octicon-organization"></span> New organization</a>
  </li>


    <li class="section-title">
      <span title="harthur/brain">This repository</span>
    </li>
      <li>
        <a href="/harthur/brain/issues/new"><span class="octicon octicon-issue-opened"></span> New issue</a>
      </li>
</ul>

</div>


    
  </div>
</div>

      

        



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        

<ul class="pagehead-actions">

    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="oPnEhvrIIRg+KZIZLEFPSeld/P2EW+RLPCtinrksKcQWwjXwG8x96yeMVdJ2IufZNfI2/T0pRo0sE+Mq/UGcaw==" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="658594" />

    <div class="select-menu js-menu-container js-select-menu">
      <a class="social-count js-social-count" href="/harthur/brain/watchers">
        172
      </a>
      <span class="minibutton select-menu-button with-count js-menu-target" role="button" tabindex="0" aria-haspopup="true">
        <span class="js-select-button">
          <span class="octicon octicon-eye-watch"></span>
          Watch
        </span>
      </span>

      <div class="select-menu-modal-holder">
        <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
          <div class="select-menu-header">
            <span class="select-menu-title">Notification status</span>
            <span class="octicon octicon-remove-close js-menu-close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container" role="menu">

            <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">You only receive notifications for conversations in which you participate or are @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye-watch"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">You receive notifications for all conversations in this repository.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye-unwatch"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">You do not receive any notifications for conversations in this repository.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

  <li>
  

  <div class="js-toggler-container js-social-container starring-container ">

    <form accept-charset="UTF-8" action="/harthur/brain/unstar" class="js-toggler-form starred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="EglTJmnYPvBD5Fw8Kxk/oqGJ0SrLq0YLSlXWlmjNxDjzHrN/tqjgzWAItqmECYVdPJieW/XA8uFyb2VaFF73EQ==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Unstar this repository" title="Unstar harthur/brain">
        <span class="octicon octicon-star-delete"></span><span class="text">Unstar</span>
      </button>
        <a class="social-count js-social-count" href="/harthur/brain/stargazers">
          2,687
        </a>
</form>
    <form accept-charset="UTF-8" action="/harthur/brain/star" class="js-toggler-form unstarred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="6vKGFFho7IkuAkiAfb883JUhuP6lzizOVdgqIN/w9f4BB7bdtosIBw55/NtN5Qq7OnpF5TR8UrfjApSt9m8HHQ==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Star this repository" title="Star harthur/brain">
        <span class="octicon octicon-star"></span><span class="text">Star</span>
      </button>
        <a class="social-count js-social-count" href="/harthur/brain/stargazers">
          2,687
        </a>
</form>  </div>

  </li>


        <li>
          <a href="/harthur/brain/fork" class="minibutton with-count js-toggler-target fork-button lighter tooltipped-n" title="Fork your own copy of harthur/brain to your account" aria-label="Fork your own copy of harthur/brain to your account" rel="nofollow" data-method="post">
            <span class="octicon octicon-git-branch-create"></span><span class="text">Fork</span>
          </a>
          <a href="/harthur/brain/network" class="social-count">233</a>
        </li>


</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/harthur" class="url fn" itemprop="url" rel="author"><span itemprop="title">harthur</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/harthur/brain" class="js-current-repository js-repo-home-link">brain</a></strong>

          <span class="page-context-loader">
            <img alt="Octocat-spinner-32" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline js-new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            

<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/harthur/brain/tree/gh-pages" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /harthur/brain/tree/gh-pages">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/harthur/brain/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g i" data-selected-links="repo_issues /harthur/brain/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>7</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/harthur/brain/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g p" data-selected-links="repo_pulls /harthur/brain/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>1</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


        <li class="tooltipped tooltipped-w" aria-label="Wiki">
          <a href="/harthur/brain/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g w" data-selected-links="repo_wiki /harthur/brain/wiki">
            <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>
    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/harthur/brain/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /harthur/brain/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/harthur/brain/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /harthur/brain/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Network">
        <a href="/harthur/brain/network" aria-label="Network" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-selected-links="repo_network /harthur/brain/network">
          <span class="octicon octicon-git-branch"></span> <span class="full-word">Network</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/harthur/brain.git" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/harthur/brain.git" data-copied-hint="copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="ssh"
  data-url="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone">
  <h3><strong>SSH</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="git@github.com:harthur/brain.git" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="git@github.com:harthur/brain.git" data-copied-hint="copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/harthur/brain" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/harthur/brain" data-copied-hint="copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      <a href="#" class="js-clone-selector" data-protocol="ssh">SSH</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <span class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <a href="https://help.github.com/articles/which-remote-url-should-i-use">
    <span class="octicon octicon-question"></span>
    </a>
  </span>
</p>


  <a href="github-windows://openRepo/https://github.com/harthur/brain" class="minibutton sidebar-button" title="Save harthur/brain to your computer and use it in GitHub Desktop." aria-label="Save harthur/brain to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>

                <a href="/harthur/brain/archive/gh-pages.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download harthur/brain as a zip file"
                   title="Download harthur/brain as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          


<a href="/harthur/brain/blob/8f09d0ff80fb271c3e7f0e04b0e838ce048a860c/brain-0.6.3.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:78c4b6dc6366dcf2d11af0ef6e73443a -->

<p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

<a href="/harthur/brain/find/gh-pages" data-pjax data-hotkey="t" class="js-show-file-finder" style="display:none">Show File Finder</a>

<div class="file-navigation">
  

<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target" data-hotkey="w"
    data-master-branch="master"
    data-ref="gh-pages"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button">gh-pages</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-remove-close js-menu-close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/harthur/brain/blob/bayesian/brain-0.6.3.min.js"
                 data-name="bayesian"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="bayesian">bayesian</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/harthur/brain/blob/crossvalidate/brain-0.6.3.min.js"
                 data-name="crossvalidate"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="crossvalidate">crossvalidate</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/harthur/brain/blob/gh-pages/brain-0.6.3.min.js"
                 data-name="gh-pages"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/harthur/brain/blob/master/brain-0.6.3.min.js"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/harthur/brain/blob/typed-arrays/brain-0.6.3.min.js"
                 data-name="typed-arrays"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="typed-arrays">typed-arrays</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/harthur/brain/tree/gh-pages" data-branch="gh-pages" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">brain</span></a></span></span><span class="separator"> / </span><strong class="final-path">brain-0.6.3.min.js</strong> <button aria-label="copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="brain-0.6.3.min.js" data-copied-hint="copied!" type="button"><span class="octicon octicon-clippy"></span></button>
  </div>
</div>


  <div class="commit file-history-tease">
      <img alt="Heather Arthur" class="main-avatar js-avatar" data-user="140420" height="24" src="https://avatars2.githubusercontent.com/u/140420?s=140" width="24" />
      <span class="author"><a href="/harthur" rel="author">harthur</a></span>
      <time class="js-relative-date" data-title-format="YYYY-MM-DD HH:mm:ss" datetime="2014-03-09T20:14:12-07:00" title="2014-03-09 20:14:12">March 09, 2014</time>
      <div class="commit-title">
          <a href="/harthur/brain/commit/8f09d0ff80fb271c3e7f0e04b0e838ce048a860c" class="message" data-pjax="true" title="add v0.6.3 files">add v0.6.3 files</a>
      </div>

    <div class="participation">
      <p class="quickstat"><a href="#blob_contributors_box" rel="facebox"><strong>1</strong>  contributor</a></p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list">
          <li class="facebox-user-list-item">
            <img alt="Heather Arthur" class=" js-avatar" data-user="140420" height="24" src="https://avatars2.githubusercontent.com/u/140420?s=140" width="24" />
            <a href="/harthur">harthur</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
        <span class="icon"><b class="octicon octicon-file-text"></b></span>
        <span class="mode" title="File Mode">file</span>
        <span class="meta-divider"></span>
          <span>24 lines (20 sloc)</span>
          <span class="meta-divider"></span>
        <span>65.044 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
            <a class="minibutton tooltipped tooltipped-w"
               href="github-windows://openRepo/https://github.com/harthur/brain?branch=gh-pages&amp;filepath=brain-0.6.3.min.js" aria-label="Open this file in GitHub for Windows">
                <span class="octicon octicon-device-desktop"></span> Open
            </a>
                <a class="minibutton tooltipped tooltipped-n js-update-url-with-hash"
                   aria-label="Clicking this button will automatically fork this project so you can edit the file"
                   href="/harthur/brain/edit/gh-pages/brain-0.6.3.min.js"
                   data-method="post" rel="nofollow">Edit</a>
          <a href="/harthur/brain/raw/gh-pages/brain-0.6.3.min.js" class="button minibutton " id="raw-url">Raw</a>
            <a href="/harthur/brain/blame/gh-pages/brain-0.6.3.min.js" class="button minibutton js-update-url-with-hash">Blame</a>
          <a href="/harthur/brain/commits/gh-pages/brain-0.6.3.min.js" class="button minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->

            <a class="minibutton danger empty-icon tooltipped tooltipped-s"
               href="/harthur/brain/delete/gh-pages/brain-0.6.3.min.js"
               aria-label="Fork this project and delete file"
               data-method="post" data-test-id="delete-blob-file" rel="nofollow">

          Delete
        </a>
      </div><!-- /.actions -->
    </div>
        <div class="blob-wrapper data type-javascript js-blob-data">
        <table class="file-code file-diff tab-size-8">
          <tr class="file-code-line">
            <td class="blob-line-nums">
              <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>
<span id="L10" rel="#L10">10</span>
<span id="L11" rel="#L11">11</span>
<span id="L12" rel="#L12">12</span>
<span id="L13" rel="#L13">13</span>
<span id="L14" rel="#L14">14</span>
<span id="L15" rel="#L15">15</span>
<span id="L16" rel="#L16">16</span>
<span id="L17" rel="#L17">17</span>
<span id="L18" rel="#L18">18</span>
<span id="L19" rel="#L19">19</span>
<span id="L20" rel="#L20">20</span>
<span id="L21" rel="#L21">21</span>
<span id="L22" rel="#L22">22</span>
<span id="L23" rel="#L23">23</span>
<span id="L24" rel="#L24">24</span>

            </td>
            <td class="blob-line-code"><div class="code-body highlight"><pre><div class='line' id='LC1'><span class="cm">/*</span></div><div class='line' id='LC2'><span class="cm">Copyright (c) 2010 Heather Arthur</span></div><div class='line' id='LC3'><br/></div><div class='line' id='LC4'><span class="cm">Permission is hereby granted, free of charge, to any person obtaining</span></div><div class='line' id='LC5'><span class="cm">a copy of this software and associated documentation files (the</span></div><div class='line' id='LC6'><span class="cm">&quot;Software&quot;), to deal in the Software without restriction, including</span></div><div class='line' id='LC7'><span class="cm">without limitation the rights to use, copy, modify, merge, publish,</span></div><div class='line' id='LC8'><span class="cm">distribute, sublicense, and/or sell copies of the Software, and to</span></div><div class='line' id='LC9'><span class="cm">permit persons to whom the Software is furnished to do so, subject to</span></div><div class='line' id='LC10'><span class="cm">the following conditions:</span></div><div class='line' id='LC11'><br/></div><div class='line' id='LC12'><span class="cm">The above copyright notice and this permission notice shall be</span></div><div class='line' id='LC13'><span class="cm">included in all copies or substantial portions of the Software.</span></div><div class='line' id='LC14'><br/></div><div class='line' id='LC15'><span class="cm">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div><div class='line' id='LC16'><span class="cm">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div><div class='line' id='LC17'><span class="cm">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND</span></div><div class='line' id='LC18'><span class="cm">NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE</span></div><div class='line' id='LC19'><span class="cm">LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION</span></div><div class='line' id='LC20'><span class="cm">OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION</span></div><div class='line' id='LC21'><span class="cm">WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></div><div class='line' id='LC22'><br/></div><div class='line' id='LC23'><span class="cm">*/</span><span class="o">!</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">]){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">require</span><span class="o">&amp;&amp;</span><span class="nx">require</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">)</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">f</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Cannot find module &#39;&quot;</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;&#39;&quot;</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">exports</span><span class="o">:</span><span class="p">{}};</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">call</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">exports</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="nx">a</span><span class="p">];</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">a</span><span class="p">)},</span><span class="nx">j</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">exports</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="k">return</span> <span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">exports</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">require</span><span class="o">&amp;&amp;</span><span class="nx">require</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">]);</span><span class="k">return</span> <span class="nx">e</span><span class="p">}({</span><span class="mi">1</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">brain</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./lib/brain&quot;</span><span class="p">)},{</span><span class="s2">&quot;./lib/brain&quot;</span><span class="o">:</span><span class="mi">2</span><span class="p">}],</span><span class="mi">2</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">NeuralNetwork</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./neuralnetwork&quot;</span><span class="p">).</span><span class="nx">NeuralNetwork</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">crossValidate</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./cross-validate&quot;</span><span class="p">)},{</span><span class="s2">&quot;./cross-validate&quot;</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="s2">&quot;./neuralnetwork&quot;</span><span class="o">:</span><span class="mi">5</span><span class="p">}],</span><span class="mi">3</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">train</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">k</span><span class="p">).</span><span class="nx">extend</span><span class="p">({</span><span class="nx">trainTime</span><span class="o">:</span><span class="nx">j</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">testTime</span><span class="o">:</span><span class="nx">l</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">iterations</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">iterations</span><span class="p">,</span><span class="nx">trainError</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span><span class="nx">learningRate</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">learningRate</span><span class="p">,</span><span class="nx">hidden</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">hiddenSizes</span><span class="p">,</span><span class="nx">network</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()});</span><span class="k">return</span> <span class="nx">m</span><span class="p">}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;underscore&quot;</span><span class="p">).</span><span class="nx">_</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="mi">4</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">sortBy</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()});</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">trainTime</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">testTime</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">iterations</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">trainError</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">j</span><span class="o">=</span><span class="p">{</span><span class="nx">truePos</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">trueNeg</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">falsePos</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">falseNeg</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">total</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">g</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">]}),</span><span class="nx">d</span><span class="p">(</span><span class="nx">j</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">j</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">]}),</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">misclasses</span><span class="p">),</span><span class="nx">o</span><span class="p">});</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="nx">g</span><span class="p">}),</span><span class="nx">j</span><span class="p">.</span><span class="nx">precision</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">truePos</span><span class="o">/</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">truePos</span><span class="o">+</span><span class="nx">j</span><span class="p">.</span><span class="nx">falsePos</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">recall</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">truePos</span><span class="o">/</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">truePos</span><span class="o">+</span><span class="nx">j</span><span class="p">.</span><span class="nx">falseNeg</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">accuracy</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">trueNeg</span><span class="o">+</span><span class="nx">j</span><span class="p">.</span><span class="nx">truePos</span><span class="p">)</span><span class="o">/</span><span class="nx">j</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">testSize</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">trainSize</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">h</span><span class="p">,{</span><span class="nx">avgs</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">stats</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">sets</span><span class="o">:</span><span class="nx">l</span><span class="p">,</span><span class="nx">misclasses</span><span class="o">:</span><span class="nx">d</span><span class="p">(</span><span class="nx">k</span><span class="p">).</span><span class="nx">flatten</span><span class="p">()}}},{</span><span class="nx">underscore</span><span class="o">:</span><span class="mi">20</span><span class="p">}],</span><span class="mi">4</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">extend</span><span class="p">(</span><span class="nx">b</span><span class="p">)},{});</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]];</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">--&gt;</span><span class="mi">0</span><span class="p">;)</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]]</span><span class="o">=</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;underscore&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="p">{</span><span class="nx">buildLookup</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">lookupFromHash</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">toArray</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">toHash</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">lookupFromArray</span><span class="o">:</span><span class="nx">g</span><span class="p">}},{</span><span class="nx">underscore</span><span class="o">:</span><span class="mi">20</span><span class="p">}],</span><span class="mi">5</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(){</span><span class="k">return</span><span class="p">.</span><span class="mi">4</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">-</span><span class="p">.</span><span class="mi">2</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">();</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">+=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="mi">2</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,{</span><span class="nx">objectMode</span><span class="o">:!</span><span class="mi">0</span><span class="p">}),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;no neural network specified&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">dataFormatDetermined</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inputKeys</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">outputKeys</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">iterations</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">iterations</span><span class="o">||</span><span class="mi">2</span><span class="nx">e4</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">errorThresh</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">errorThresh</span><span class="o">||</span><span class="p">.</span><span class="mi">005</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">log</span><span class="o">||!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">logPeriod</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">logPeriod</span><span class="o">||</span><span class="mi">10</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">callbackPeriod</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">callbackPeriod</span><span class="o">||</span><span class="mi">10</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">floodCallback</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">floodCallback</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">doneTrainingCallback</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">doneTrainingCallback</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">finishStreamIteration</span><span class="p">),</span><span class="k">this</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;underscore&quot;</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./lookup&quot;</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;stream&quot;</span><span class="p">).</span><span class="nx">Writable</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="k">this</span><span class="p">.</span><span class="nx">learningRate</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">learningRate</span><span class="o">||</span><span class="p">.</span><span class="mi">3</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">momentum</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">momentum</span><span class="o">||</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">hiddenSizes</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hiddenLayers</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">binaryThresh</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">binaryThresh</span><span class="o">||</span><span class="p">.</span><span class="mi">5</span><span class="p">};</span><span class="nx">m</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">initialize</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">deltas</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">changes</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">deltas</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">)}}}},</span><span class="nx">run</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">runInput</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">toHash</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="p">,</span><span class="nx">b</span><span class="p">)),</span><span class="nx">b</span><span class="p">},</span><span class="nx">runInput</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">+=</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">exp</span><span class="p">(</span><span class="o">-</span><span class="nx">e</span><span class="p">))}</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="nx">b</span><span class="p">]}</span><span class="k">return</span> <span class="nx">g</span><span class="p">},</span><span class="nx">train</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">formatData</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">iterations</span><span class="o">||</span><span class="mi">2</span><span class="nx">e4</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">errorThresh</span><span class="o">||</span><span class="p">.</span><span class="mi">005</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">log</span><span class="o">||!</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">logPeriod</span><span class="o">||</span><span class="mi">10</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">callback</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">callbackPeriod</span><span class="o">||</span><span class="mi">10</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">output</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hiddenSizes</span><span class="p">;</span><span class="nx">l</span><span class="o">||</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">j</span><span class="o">/</span><span class="mi">2</span><span class="p">))]);</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">i</span><span class="p">([</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">]).</span><span class="nx">flatten</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">trainPattern</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">q</span><span class="p">].</span><span class="nx">input</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">q</span><span class="p">].</span><span class="nx">output</span><span class="p">);</span><span class="nx">p</span><span class="o">+=</span><span class="nx">r</span><span class="p">}</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="o">%</span><span class="nx">f</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;iterations:&quot;</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="s2">&quot;training error:&quot;</span><span class="p">,</span><span class="nx">n</span><span class="p">),</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="o">%</span><span class="nx">h</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">iterations</span><span class="o">:</span><span class="nx">o</span><span class="p">})}</span><span class="k">return</span><span class="p">{</span><span class="nx">error</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">iterations</span><span class="o">:</span><span class="nx">o</span><span class="p">}},</span><span class="nx">trainPattern</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">runInput</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">calculateDeltas</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">adjustWeights</span><span class="p">();</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">calculateDeltas</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">--</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">-</span><span class="nx">d</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">deltas</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">+=</span><span class="nx">f</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="p">][</span><span class="nx">c</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">deltas</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">adjustWeights</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">deltas</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">c</span><span class="p">][</span><span class="nx">e</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">learningRate</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">momentum</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">c</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">c</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">+=</span><span class="nx">f</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">learningRate</span><span class="o">*</span><span class="nx">d</span><span class="p">}},</span><span class="nx">formatData</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">input</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">isArray</span><span class="p">()</span><span class="o">||</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">Float64Array</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">buildLookup</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">pluck</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">))),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">input</span><span class="p">);</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">extend</span><span class="p">({</span><span class="nx">input</span><span class="o">:</span><span class="nx">b</span><span class="p">})},</span><span class="k">this</span><span class="p">)),</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">output</span><span class="p">).</span><span class="nx">isArray</span><span class="p">()</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">buildLookup</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">pluck</span><span class="p">(</span><span class="s2">&quot;output&quot;</span><span class="p">))),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">output</span><span class="p">);</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">extend</span><span class="p">({</span><span class="nx">output</span><span class="o">:</span><span class="nx">b</span><span class="p">})},</span><span class="k">this</span><span class="p">)),</span><span class="nx">a</span><span class="p">},</span><span class="nx">test</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">formatData</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">output</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">runInput</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">input</span><span class="p">),</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">output</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">binaryThresh</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">:</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">max</span><span class="p">()),</span><span class="nx">m</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">o</span><span class="p">).</span><span class="nx">max</span><span class="p">())),</span><span class="nx">l</span><span class="o">!=</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="nx">i</span><span class="p">(</span><span class="nx">p</span><span class="p">).</span><span class="nx">extend</span><span class="p">({</span><span class="nx">actual</span><span class="o">:</span><span class="nx">l</span><span class="p">,</span><span class="nx">expected</span><span class="o">:</span><span class="nx">m</span><span class="p">}),</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">)}</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">==</span><span class="nx">m</span><span class="o">?</span><span class="nx">f</span><span class="o">++:</span><span class="mi">1</span><span class="o">==</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">==</span><span class="nx">m</span><span class="o">?</span><span class="nx">e</span><span class="o">++:</span><span class="mi">0</span><span class="o">==</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">==</span><span class="nx">m</span><span class="o">?</span><span class="nx">d</span><span class="o">++:</span><span class="mi">1</span><span class="o">==</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">==</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">++</span><span class="p">);</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">});</span><span class="nx">j</span><span class="o">+=</span><span class="nx">g</span><span class="p">(</span><span class="nx">q</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">misclasses</span><span class="o">:</span><span class="nx">h</span><span class="p">};</span><span class="k">return</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">(</span><span class="nx">s</span><span class="p">).</span><span class="nx">extend</span><span class="p">({</span><span class="nx">trueNeg</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">truePos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">falseNeg</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">falsePos</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">total</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">precision</span><span class="o">:</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="p">),</span><span class="nx">recall</span><span class="o">:</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">d</span><span class="p">),</span><span class="nx">accuracy</span><span class="o">:</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">}),</span><span class="nx">s</span><span class="p">},</span><span class="nx">toJSON</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">?</span><span class="nx">i</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="p">).</span><span class="nx">keys</span><span class="p">()</span><span class="o">:</span><span class="nx">b</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">?</span><span class="nx">i</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="p">).</span><span class="nx">keys</span><span class="p">()</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">e</span><span class="p">].</span><span class="nx">bias</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">d</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">e</span><span class="p">].</span><span class="nx">weights</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span> <span class="k">in</span> <span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="mi">1</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="p">[</span><span class="nx">f</span><span class="p">]),</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">e</span><span class="p">].</span><span class="nx">weights</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">d</span><span class="p">][</span><span class="nx">g</span><span class="p">]}}}}</span><span class="k">return</span><span class="p">{</span><span class="nx">layers</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">outputLookup</span><span class="o">:!!</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="p">,</span><span class="nx">inputLookup</span><span class="o">:!!</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="p">}},</span><span class="nx">fromJSON</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">layers</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="o">||</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">?</span><span class="nx">c</span><span class="o">!=</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLayer</span><span class="o">||</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">lookupFromHash</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">lookupFromHash</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">keys</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span> <span class="k">in</span> <span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">biases</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">bias</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">weights</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">weights</span><span class="p">).</span><span class="nx">toArray</span><span class="p">()}}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toFunction</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">();</span><span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">,</span><span class="s2">&quot;  var net = &quot;</span><span class="o">+</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;;\n\n  for (var i = 1; i &lt; net.layers.length; i++) {\n    var layer = net.layers[i];\n    var output = {};\n    \n    for (var id in layer) {\n      var node = layer[id];\n      var sum = node.bias;\n      \n      for (var iid in node.weights) {\n        sum += node.weights[iid] * input[iid];\n      }\n      output[id] = (1 / (1 + Math.exp(-sum)));\n    }\n    input = output;\n  }\n  return output;&quot;</span><span class="p">)},</span><span class="nx">createTrainStream</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="nx">a</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">trainStream</span><span class="o">=</span><span class="k">new</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">trainStream</span><span class="p">}},</span><span class="nx">c</span><span class="p">.</span><span class="nx">NeuralNetwork</span><span class="o">=</span><span class="nx">m</span><span class="p">,</span><span class="nx">l</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">),</span><span class="nx">c</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">dataFormatDetermined</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inputKeys</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">union</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputKeys</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">input</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">outputKeys</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">union</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputKeys</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">output</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">firstDatum</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">firstDatum</span><span class="o">||</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">.</span><span class="nx">formatData</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">trainDatum</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nx">c</span><span class="p">()},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trainDatum</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">.</span><span class="nx">trainPattern</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">input</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">output</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">sum</span><span class="o">+=</span><span class="nx">b</span><span class="p">},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">finishStreamIteration</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dataFormatDetermined</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;This iteration&#39;s data length was different from the first.&quot;</span><span class="p">),</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">dataFormatDetermined</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">.</span><span class="nx">inputLookup</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">lookupFromArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputKeys</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">.</span><span class="nx">outputLookup</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">lookupFromArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outputKeys</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">.</span><span class="nx">formatData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">firstDatum</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">output</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hiddenSizes</span><span class="p">;</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">))]);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">([</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">]).</span><span class="nx">flatten</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">dataFormatDetermined</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">neuralNetwork</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="k">void</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">floodCallback</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">floodCallback</span><span class="p">())}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sum</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">logPeriod</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;iterations:&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;training error:&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">callbackPeriod</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">iterations</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="p">}),</span><span class="k">this</span><span class="p">.</span><span class="nx">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">iterations</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">errorThresh</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">floodCallback</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">floodCallback</span><span class="p">()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">doneTrainingCallback</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">doneTrainingCallback</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">iterations</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="p">})}},{</span><span class="s2">&quot;./lookup&quot;</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">,</span><span class="nx">stream</span><span class="o">:</span><span class="mi">12</span><span class="p">,</span><span class="nx">underscore</span><span class="o">:</span><span class="mi">20</span><span class="p">}],</span><span class="mi">6</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;base64&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">C</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">%</span><span class="mi">4</span><span class="o">!==</span><span class="mi">0</span><span class="p">;)</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;=&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;First argument needs to be a number, array or string.&quot;</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">_useTypedArrays</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="nx">D</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">f</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">_isBuffer</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">_useTypedArrays</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">Uint8Array</span><span class="o">&amp;&amp;</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">Uint8Array</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">_set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">isBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">readUInt8</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">.</span><span class="nx">_useTypedArrays</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">S</span><span class="p">(</span><span class="nx">g</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;Invalid hex string&quot;</span><span class="p">),</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">/</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="mi">16</span><span class="p">);</span><span class="nx">S</span><span class="p">(</span><span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="s2">&quot;Invalid hex string&quot;</span><span class="p">),</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">_charsWritten</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">h</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_charsWritten</span><span class="o">=</span><span class="nx">N</span><span class="p">(</span><span class="nx">J</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_charsWritten</span><span class="o">=</span><span class="nx">N</span><span class="p">(</span><span class="nx">K</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_charsWritten</span><span class="o">=</span><span class="nx">N</span><span class="p">(</span><span class="nx">M</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_charsWritten</span><span class="o">=</span><span class="nx">N</span><span class="p">(</span><span class="nx">L</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">T</span><span class="p">.</span><span class="nx">fromByteArray</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">127</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">+=</span><span class="nx">O</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">+</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]),</span><span class="nx">e</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="o">+=</span><span class="s2">&quot;%&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">+</span><span class="nx">O</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;(</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">),(</span><span class="o">!</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">||</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">+=</span><span class="nx">I</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span><span class="nx">e</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">+</span><span class="mi">256</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">));</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">|=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">,</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">|=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">])),</span><span class="nx">f</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">));</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">),</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">|=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">),</span><span class="nx">f</span><span class="o">|=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">+=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">),</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">|=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">),</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">|=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="p">]),</span><span class="nx">f</span><span class="o">+=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">),</span><span class="nx">f</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">));</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">32768</span><span class="o">&amp;</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="o">?-</span><span class="mi">1</span><span class="o">*</span><span class="p">(</span><span class="mi">65535</span><span class="o">-</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">));</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">2147483648</span><span class="o">&amp;</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="o">?-</span><span class="mi">1</span><span class="o">*</span><span class="p">(</span><span class="mi">4294967295</span><span class="o">-</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">)),</span><span class="nx">U</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">4</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">7</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">)),</span><span class="nx">U</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">8</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">P</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">65535</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">h</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">255</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="mi">1</span><span class="o">-</span><span class="nx">g</span><span class="p">))</span><span class="o">&gt;&gt;&gt;</span><span class="mi">8</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="mi">1</span><span class="o">-</span><span class="nx">g</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">3</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">P</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">4294967295</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nx">h</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">&gt;&gt;&gt;</span><span class="mi">8</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="mi">3</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">}</span><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">Q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">32767</span><span class="p">,</span><span class="o">-</span><span class="mi">32768</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">65535</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">3</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">Q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">2147483647</span><span class="p">,</span><span class="o">-</span><span class="mi">2147483648</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">4294967295</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">3</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">R</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mf">3.4028234663852886e38</span><span class="p">,</span><span class="o">-</span><span class="mf">3.4028234663852886e38</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="o">||</span><span class="nx">U</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">4</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">B</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">,</span><span class="s2">&quot;missing or invalid endian&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">7</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">R</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mf">1.7976931348623157e308</span><span class="p">,</span><span class="o">-</span><span class="mf">1.7976931348623157e308</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="o">||</span><span class="nx">U</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">8</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">C</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">trim</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s+|\s+$/g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">D</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_isBuffer</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_get</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">get</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_set</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">get</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">get</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">set</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">write</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">toString</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">toString</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">toJSON</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">copy</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">slice</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readUInt8</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readUInt8</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readUInt16LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readUInt16LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readUInt16BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readUInt16BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readUInt32LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readUInt32LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readUInt32BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readUInt32BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readInt8</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readInt8</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readInt16LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readInt16LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readInt16BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readInt16BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readInt32LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readInt32LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readInt32BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readInt32BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readFloatLE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readFloatLE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readFloatBE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readFloatBE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readDoubleLE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readDoubleLE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readDoubleBE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">readDoubleBE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeUInt8</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeUInt8</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeUInt16LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeUInt16LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeUInt16BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeUInt16BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeUInt32LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeUInt32LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeUInt32BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeUInt32BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeInt8</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeInt8</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeInt16LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeInt16LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeInt16BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeInt16BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeInt32LE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeInt32LE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeInt32BE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeInt32BE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeFloatLE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeFloatLE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeFloatBE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeFloatBE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeDoubleLE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeDoubleLE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeDoubleBE</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">writeDoubleBE</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">fill</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">fill</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">inspect</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">inspect</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">toArrayBuffer</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">toArrayBuffer</span><span class="p">,</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="o">=~~</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">0</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">=~~</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="o">+</span><span class="nx">a</span><span class="p">),</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">G</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;[object Array]&quot;</span><span class="o">===</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)})(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">G</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">isBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="kd">function</span> <span class="nx">I</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="mi">16</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">J</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">127</span><span class="o">&gt;=</span><span class="nx">d</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;=</span><span class="mi">55296</span><span class="o">&amp;&amp;</span><span class="mi">57343</span><span class="o">&gt;=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;%&quot;</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="mi">16</span><span class="p">))}}</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">K</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">255</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">L</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">%</span><span class="mi">256</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">M</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">T</span><span class="p">.</span><span class="nx">toByteArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">N</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">e</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">O</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">65533</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;cannot write a non-number as a number&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;specified a negative value for writing an unsigned value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;value is larger than maximum value for type&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;value has a fractional component&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">Q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;cannot write a non-number as a number&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;value larger than maximum allowed value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;value smaller than minimum allowed value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;value has a fractional component&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">R</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;cannot write a non-number as a number&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;value larger than maximum allowed value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;value smaller than minimum allowed value&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;Failed assertion&quot;</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">T</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;base64-js&quot;</span><span class="p">),</span><span class="nx">U</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;ieee754&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">Buffer</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">SlowBuffer</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">INSPECT_MAX_BYTES</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">poolSize</span><span class="o">=</span><span class="mi">8192</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">_useTypedArrays</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">Uint8Array</span><span class="o">||</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">ArrayBuffer</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">foo</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="mi">42</span><span class="p">},</span><span class="mi">42</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">subarray</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}}(),</span><span class="nx">d</span><span class="p">.</span><span class="nx">isEncoding</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">()){</span><span class="k">case</span><span class="s2">&quot;hex&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf8&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-8&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;ascii&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;binary&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;base64&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;raw&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;ucs2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;ucs-2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf16le&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-16le&quot;</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}},</span><span class="nx">d</span><span class="p">.</span><span class="nx">isBuffer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">||!</span><span class="nx">a</span><span class="p">.</span><span class="nx">_isBuffer</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">byteLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;utf8&quot;</span><span class="p">){</span><span class="k">case</span><span class="s2">&quot;hex&quot;</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;utf8&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-8&quot;</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="nx">J</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ascii&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;binary&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;raw&quot;</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;base64&quot;</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="nx">M</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ucs2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;ucs-2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf16le&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-16le&quot;</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Unknown encoding&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">concat</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="nx">G</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="s2">&quot;Usage: Buffer.concat(list, [totalLength])\nlist should be an Array.&quot;</span><span class="p">),</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">+=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">f</span><span class="o">+=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">}</span><span class="nx">b</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">))</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nb">String</span><span class="p">(</span><span class="nx">d</span><span class="o">||</span><span class="s2">&quot;utf8&quot;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="kd">var</span> <span class="nx">m</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">case</span><span class="s2">&quot;hex&quot;</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;utf8&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-8&quot;</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ascii&quot;</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;binary&quot;</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;base64&quot;</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ucs2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;ucs-2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf16le&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-16le&quot;</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Unknown encoding&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nx">m</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nb">String</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="s2">&quot;utf8&quot;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nb">Number</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span><span class="s2">&quot;hex&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">o</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;utf8&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-8&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ascii&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">m</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;binary&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;base64&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">k</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ucs2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;ucs-2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf16le&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf-16le&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">p</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Unknown encoding&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;Buffer&quot;</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_arr</span><span class="o">||</span><span class="k">this</span><span class="p">,</span><span class="mi">0</span><span class="p">)}},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">copy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">d</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">S</span><span class="p">(</span><span class="nx">d</span><span class="o">&gt;=</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;sourceEnd &lt; sourceStart&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;targetStart out of bounds&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;sourceStart out of bounds&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">d</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;sourceEnd out of bounds&quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">]}},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">_useTypedArrays</span><span class="p">)</span><span class="k">return</span> <span class="nx">D</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="p">];</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">get</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;.get() is deprecated. Access using array indexes instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">readUInt8</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;.set() is deprecated. Access using array indexes instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">writeUInt8</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readUInt8</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">)),</span><span class="nx">a</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">]},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readUInt16LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">q</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readUInt16BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">q</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readUInt32LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">r</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readUInt32BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">r</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readInt8</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to read beyond buffer length&quot;</span><span class="p">)),</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">128</span><span class="o">&amp;</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">return</span> <span class="nx">c</span><span class="o">?-</span><span class="mi">1</span><span class="o">*</span><span class="p">(</span><span class="mi">255</span><span class="o">-</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">]}},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readInt16LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readInt16BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readInt32LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readInt32BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readFloatLE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readFloatBE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readDoubleLE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">v</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">readDoubleBE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">v</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeUInt8</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">255</span><span class="p">)),</span><span class="nx">b</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeUInt16LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">w</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeUInt16BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">w</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeUInt32LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeUInt32BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeInt8</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;missing value&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;missing offset&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;Trying to write beyond buffer length&quot;</span><span class="p">),</span><span class="nx">Q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">127</span><span class="p">,</span><span class="o">-</span><span class="mi">128</span><span class="p">)),</span><span class="nx">b</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">writeUInt8</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">writeUInt8</span><span class="p">(</span><span class="mi">255</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">))},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeInt16LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">y</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeInt16BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">y</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeInt32LE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">z</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeInt32BE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">z</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeFloatLE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">A</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeFloatBE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">A</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeDoubleLE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">B</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">writeDoubleBE</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">B</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fill</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span><span class="nx">S</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="s2">&quot;value is not a number&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;end &lt; start&quot;</span><span class="p">),</span><span class="nx">c</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">S</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;start out of bounds&quot;</span><span class="p">),</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="s2">&quot;end out of bounds&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">inspect</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">I</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">]),</span><span class="nx">d</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">INSPECT_MAX_BYTES</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;...&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">return</span><span class="s2">&quot;&lt;Buffer &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;&gt;&quot;</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toArrayBuffer</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">Uint8Array</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">_useTypedArrays</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">buffer</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">buffer</span><span class="p">}</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Buffer.toArrayBuffer not supported in this browser&quot;</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">V</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">},{</span><span class="s2">&quot;base64-js&quot;</span><span class="o">:</span><span class="mi">7</span><span class="p">,</span><span class="nx">ieee754</span><span class="o">:</span><span class="mi">8</span><span class="p">}],</span><span class="mi">7</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="s2">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(){</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="o">===</span><span class="nx">g</span><span class="o">?</span><span class="mi">62</span><span class="o">:</span><span class="nx">b</span><span class="o">===</span><span class="nx">h</span><span class="o">?</span><span class="mi">63</span><span class="o">:</span><span class="nx">i</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="nx">i</span><span class="o">+</span><span class="mi">10</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">-</span><span class="nx">i</span><span class="o">+</span><span class="mi">26</span><span class="o">+</span><span class="mi">26</span><span class="o">:</span><span class="nx">k</span><span class="o">+</span><span class="mi">26</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">-</span><span class="nx">k</span><span class="o">:</span><span class="nx">j</span><span class="o">+</span><span class="mi">26</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">-</span><span class="nx">j</span><span class="o">+</span><span class="mi">26</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">%</span><span class="mi">4</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Invalid string. Length must be a multiple of 4&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="s2">&quot;=&quot;</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">k</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="s2">&quot;=&quot;</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">4</span><span class="o">-</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">4</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">+=</span><span class="mi">4</span><span class="p">,</span><span class="nx">e</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">18</span><span class="o">|</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">12</span><span class="o">|</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="o">|</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">3</span><span class="p">)),</span><span class="nx">c</span><span class="p">((</span><span class="mi">16711680</span><span class="o">&amp;</span><span class="nx">h</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">),</span><span class="nx">c</span><span class="p">((</span><span class="mi">65280</span><span class="o">&amp;</span><span class="nx">h</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="mi">255</span><span class="o">&amp;</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="mi">2</span><span class="o">===</span><span class="nx">i</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="o">|</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="mi">255</span><span class="o">&amp;</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="mi">1</span><span class="o">===</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">10</span><span class="o">|</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="o">|</span><span class="nx">a</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="nx">h</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="mi">255</span><span class="o">&amp;</span><span class="nx">h</span><span class="p">)),</span><span class="nx">j</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">18</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">6</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">(</span><span class="mi">63</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">%</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">i</span><span class="o">+=</span><span class="nx">d</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="o">+=</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="s2">&quot;==&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="o">+=</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="s2">&quot;=&quot;</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">Uint8Array</span><span class="o">?</span><span class="nx">Uint8Array</span><span class="o">:</span><span class="nb">Array</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="s2">&quot;+&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span><span class="nx">h</span><span class="o">=</span><span class="s2">&quot;/&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="s2">&quot;a&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="s2">&quot;A&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">toByteArray</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">fromByteArray</span><span class="o">=</span><span class="nx">e</span><span class="p">}()},{}],</span><span class="mi">8</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">read</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">8</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">h</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="o">=-</span><span class="mi">7</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">l</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">+=</span><span class="nx">m</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">n</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;-</span><span class="nx">k</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">&gt;&gt;=-</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="o">+=</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">256</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">l</span><span class="p">],</span><span class="nx">l</span><span class="o">+=</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="o">-=</span><span class="mi">8</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;-</span><span class="nx">k</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">&gt;&gt;=-</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="o">+=</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="mi">256</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">l</span><span class="p">],</span><span class="nx">l</span><span class="o">+=</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="o">-=</span><span class="mi">8</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">j</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="k">return</span> <span class="nx">g</span><span class="o">?</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">*</span><span class="p">(</span><span class="nx">n</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">);</span><span class="nx">g</span><span class="o">+=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">f</span><span class="o">-=</span><span class="nx">j</span><span class="p">}</span><span class="k">return</span><span class="p">(</span><span class="nx">n</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="o">-</span><span class="nx">d</span><span class="p">)},</span><span class="nx">c</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">8</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">j</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">23</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">24</span><span class="p">)</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">77</span><span class="p">)</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">/</span><span class="nx">b</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">LN2</span><span class="p">),</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="nx">g</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">--</span><span class="p">,</span><span class="nx">i</span><span class="o">*=</span><span class="mi">2</span><span class="p">),</span><span class="nx">b</span><span class="o">+=</span><span class="nx">g</span><span class="o">+</span><span class="nx">l</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">?</span><span class="nx">m</span><span class="o">/</span><span class="nx">i</span><span class="o">:</span><span class="nx">m</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">l</span><span class="p">),</span><span class="nx">b</span><span class="o">*</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">++</span><span class="p">,</span><span class="nx">i</span><span class="o">/=</span><span class="mi">2</span><span class="p">),</span><span class="nx">g</span><span class="o">+</span><span class="nx">l</span><span class="o">&gt;=</span><span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="o">+</span><span class="nx">l</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">g</span><span class="o">+=</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">));</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">8</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">&amp;</span><span class="nx">h</span><span class="p">,</span><span class="nx">n</span><span class="o">+=</span><span class="nx">o</span><span class="p">,</span><span class="nx">h</span><span class="o">/=</span><span class="mi">256</span><span class="p">,</span><span class="nx">e</span><span class="o">-=</span><span class="mi">8</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">&lt;&lt;</span><span class="nx">e</span><span class="o">|</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="o">+=</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">&amp;</span><span class="nx">g</span><span class="p">,</span><span class="nx">n</span><span class="o">+=</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="o">/=</span><span class="mi">256</span><span class="p">,</span><span class="nx">j</span><span class="o">-=</span><span class="mi">8</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">n</span><span class="o">-</span><span class="nx">o</span><span class="p">]</span><span class="o">|=</span><span class="mi">128</span><span class="o">*</span><span class="nx">p</span><span class="p">}},{}],</span><span class="mi">9</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||</span><span class="p">{},</span><span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">defaultMaxListeners</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">||</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;n must be a positive number&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">emit</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{}),</span><span class="s2">&quot;error&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">error</span><span class="o">||</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span><span class="k">throw</span> <span class="nx">b</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nb">Error</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Uncaught, unspecified &quot;error&quot; event.&#39;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="k">switch</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">)){</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">)}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;listener must be a function&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{}),</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">newListener</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;newListener&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">listener</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">listener</span><span class="o">:</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="p">]</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">warned</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="p">)</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">defaultMaxListeners</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="p">,</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">warned</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">length</span><span class="p">),</span><span class="nx">console</span><span class="p">.</span><span class="nx">trace</span><span class="p">())}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addListener</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">once</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;listener must be a function&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">listener</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;listener must be a function&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">listener</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">listener</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;removeListener&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">)){</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">--&gt;</span><span class="mi">0</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">listener</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">listener</span><span class="o">===</span><span class="nx">b</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="mi">1</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;removeListener&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{}</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="s2">&quot;removeListener&quot;</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="p">(</span><span class="s2">&quot;removeListener&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{},</span><span class="k">this</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">else</span> <span class="k">for</span><span class="p">(;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;)</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span><span class="k">return</span> <span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="k">this</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">listeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">?</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">]]</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="p">[]},</span><span class="nx">c</span><span class="p">.</span><span class="nx">listenerCount</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_events</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">?</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">b</span><span class="p">])</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">}},{}],</span><span class="mi">10</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="p">.</span><span class="nx">nextTick</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nb">window</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">setImmediate</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nb">window</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">postMessage</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setImmediate</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="p">;</span><span class="k">if</span><span class="p">((</span><span class="nx">b</span><span class="o">===</span><span class="nb">window</span><span class="o">||</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&quot;process-tick&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="nx">d</span><span class="p">()}},</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nb">window</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="s2">&quot;process-tick&quot;</span><span class="p">,</span><span class="s2">&quot;*&quot;</span><span class="p">)}}</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;browser&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">browser</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="p">.</span><span class="nx">argv</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="p">.</span><span class="nx">binding</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;process.binding is not supported&quot;</span><span class="p">)},</span><span class="nx">c</span><span class="p">.</span><span class="nx">cwd</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;/&quot;</span><span class="p">},</span><span class="nx">c</span><span class="p">.</span><span class="nx">chdir</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;process.chdir is not supported&quot;</span><span class="p">)}},{}],</span><span class="mi">11</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">h</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">readable</span><span class="o">===!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">readable</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">writable</span><span class="o">===!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">writable</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">allowHalfOpen</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">allowHalfOpen</span><span class="o">===!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">allowHalfOpen</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">))</span><span class="o">:</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">allowHalfOpen</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">_writableState</span><span class="p">.</span><span class="nx">ended</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">f</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">end</span><span class="p">()})}}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;process/browser.js&quot;</span><span class="p">).</span><span class="nx">nextTick</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./readable.js&quot;</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./writable.js&quot;</span><span class="p">);</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">write</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_write</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_write</span><span class="p">},{</span><span class="s2">&quot;./readable.js&quot;</span><span class="o">:</span><span class="mi">15</span><span class="p">,</span><span class="s2">&quot;./writable.js&quot;</span><span class="o">:</span><span class="mi">17</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">,</span><span class="s2">&quot;process/browser.js&quot;</span><span class="o">:</span><span class="mi">13</span><span class="p">}],</span><span class="mi">12</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;events&quot;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">);</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">Readable</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./readable.js&quot;</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">Writable</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./writable.js&quot;</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">Duplex</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./duplex.js&quot;</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">Transform</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./transform.js&quot;</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">PassThrough</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./passthrough.js&quot;</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">Stream</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pipe</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">writable</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">pause</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">pause</span><span class="p">()</span></div><div class='line' id='LC24'><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="nx">j</span><span class="p">.</span><span class="nx">readable</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">resume</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">resume</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span><span class="nx">k</span><span class="o">||</span><span class="p">(</span><span class="nx">k</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">end</span><span class="p">())}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(){</span><span class="nx">k</span><span class="o">||</span><span class="p">(</span><span class="nx">k</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">destroy</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">destroy</span><span class="p">())}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">(),</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">listenerCount</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;error&quot;</span><span class="p">))</span><span class="k">throw</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(){</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;drain&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;drain&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">_isStdio</span><span class="o">||</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">===!</span><span class="mi">1</span><span class="o">||</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">));</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;pipe&quot;</span><span class="p">,</span><span class="nx">j</span><span class="p">),</span><span class="nx">a</span><span class="p">}},{</span><span class="s2">&quot;./duplex.js&quot;</span><span class="o">:</span><span class="mi">11</span><span class="p">,</span><span class="s2">&quot;./passthrough.js&quot;</span><span class="o">:</span><span class="mi">14</span><span class="p">,</span><span class="s2">&quot;./readable.js&quot;</span><span class="o">:</span><span class="mi">15</span><span class="p">,</span><span class="s2">&quot;./transform.js&quot;</span><span class="o">:</span><span class="mi">16</span><span class="p">,</span><span class="s2">&quot;./writable.js&quot;</span><span class="o">:</span><span class="mi">17</span><span class="p">,</span><span class="nx">events</span><span class="o">:</span><span class="mi">9</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">}],</span><span class="mi">13</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="mi">10</span><span class="p">)},{}],</span><span class="mi">14</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="o">?</span><span class="k">void</span> <span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./transform.js&quot;</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">);</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_transform</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">a</span><span class="p">)}},{</span><span class="s2">&quot;./transform.js&quot;</span><span class="o">:</span><span class="mi">16</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">}],</span><span class="mi">15</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">16384</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">=~~</span><span class="k">this</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pipes</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">flowing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ended</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">reading</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">calledRead</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emittedReadable</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">readableListening</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultEncoding</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">defaultEncoding</span><span class="o">||</span><span class="s2">&quot;utf8&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ranOut</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">awaitDrain</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">readingMore</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">decoder</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">encoding</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">x</span><span class="o">||</span><span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;string_decoder&quot;</span><span class="p">).</span><span class="nx">StringDecoder</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">decoder</span><span class="o">=</span><span class="k">new</span> <span class="nx">x</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">encoding</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">encoding</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">readable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">void</span> <span class="nx">z</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">))</span><span class="o">:</span><span class="k">new</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">c</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">||</span><span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">||</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">&amp;&amp;!</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;stream.push() after EOF&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;stream.unshift() after end event&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">)}</span><span class="k">else</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="o">||</span><span class="nx">e</span><span class="o">||</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">c</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">+=</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span> <span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="o">=!</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">ended</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">D</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="nx">D</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">--</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="mi">32</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">)</span><span class="nx">a</span><span class="o">|=</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">flowing</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">a</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="nx">A</span><span class="p">.</span><span class="nx">isBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">||</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">||</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;Invalid non-string/buffer chunk&quot;</span><span class="p">)),</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">+=</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">emittedReadable</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">emittedReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">sync</span><span class="o">?</span><span class="nx">B</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">)})</span><span class="o">:</span><span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">readingMore</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">readingMore</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}))}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">flowing</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">c</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">);)</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">readingMore</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">awaitDrain</span><span class="o">--</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">awaitDrain</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">awaitDrain</span><span class="o">++</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">awaitDrain</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">read</span><span class="p">());)</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">pipes</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">v</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">pipes</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">awaitDrain</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">flowing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">void</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">listenerCount</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;data&quot;</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">)))</span><span class="o">:</span><span class="k">void</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">ranOut</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">ranOut</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">ranOut</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">q</span><span class="p">(</span><span class="k">this</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">flowing</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Cannot switch to old mode now.&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">||!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">readable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pipe</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">addListener</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="o">!</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">read</span><span class="p">());)</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}),</span><span class="nx">a</span><span class="p">.</span><span class="nx">pause</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;pause&quot;</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">resume</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">?</span><span class="nx">B</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">)})</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;resume&quot;</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">f</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="p">,</span><span class="nx">g</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">A</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">else</span><span class="p">{</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">f</span><span class="o">?</span><span class="nx">c</span><span class="o">+=</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">),</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">shift</span><span class="p">(),</span><span class="nx">i</span><span class="o">+=</span><span class="nx">l</span><span class="p">}}</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;endReadable called on non-empty stream&quot;</span><span class="p">);</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">calledRead</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">||</span><span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">readable</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">))}))}</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">c</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ReadableState</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;events&quot;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./index.js&quot;</span><span class="p">),</span><span class="nx">A</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;buffer&quot;</span><span class="p">).</span><span class="nx">Buffer</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;process/browser.js&quot;</span><span class="p">).</span><span class="nx">nextTick</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">);</span><span class="nx">C</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">z</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">return</span><span class="s2">&quot;string&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">defaultEncoding</span><span class="p">,</span><span class="nx">b</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">encoding</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)),</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unshift</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">return</span> <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setEncoding</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">x</span><span class="o">||</span><span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;string_decoder&quot;</span><span class="p">).</span><span class="nx">StringDecoder</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">decoder</span><span class="o">=</span><span class="k">new</span> <span class="nx">x</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">encoding</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="mi">8388608</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">read</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">calledRead</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">((</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">emittedReadable</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="p">))</span><span class="k">return</span> <span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">a</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=!</span><span class="mi">0</span><span class="p">),(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_read</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="nx">d</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">reading</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-=</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">e</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_read</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;not implemented&quot;</span><span class="p">))},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pipe</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">===</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">end</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;drain&quot;</span><span class="p">,</span><span class="nx">o</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;unpipe&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">),(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">_writableState</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">_writableState</span><span class="p">.</span><span class="nx">needDrain</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">j</span><span class="p">(),</span><span class="mi">0</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">y</span><span class="p">.</span><span class="nx">listenerCount</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;error&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">j</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">j</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(){</span><span class="nx">k</span><span class="p">.</span><span class="nx">unpipe</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">pipesCount</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">pipes</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">pipes</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">pipes</span><span class="p">,</span><span class="nx">a</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">pipes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="nx">l</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">!==!</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">stdout</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">stderr</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">m</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">f</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">endEmitted</span><span class="o">?</span><span class="nx">B</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="nx">n</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;unpipe&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">p</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;drain&quot;</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">listenerCount</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;error&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;pipe&quot;</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">l</span><span class="p">.</span><span class="nx">flowing</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">,</span><span class="nx">r</span><span class="p">),</span><span class="nx">l</span><span class="p">.</span><span class="nx">flowing</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">q</span><span class="p">(</span><span class="nx">k</span><span class="p">)})),</span><span class="nx">a</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unpipe</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">,</span><span class="nx">r</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">flowing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;unpipe&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&quot;readable&quot;</span><span class="p">,</span><span class="nx">r</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">flowing</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;unpipe&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">-=</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipesCount</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;unpipe&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="o">!==</span><span class="nx">a</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">flowing</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="s2">&quot;readable&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">readable</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">readableListening</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">readableListening</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">emittedReadable</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">reading</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="mi">0</span><span class="p">))}</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addListener</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">resume</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;resume&quot;</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pause</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;pause&quot;</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">wrap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">,</span><span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)}),</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">decoder</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">e</span><span class="p">)),</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">f</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">pause</span><span class="p">())}});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="s2">&quot;undefined&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}(</span><span class="nx">e</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="s2">&quot;close&quot;</span><span class="p">,</span><span class="s2">&quot;destroy&quot;</span><span class="p">,</span><span class="s2">&quot;pause&quot;</span><span class="p">,</span><span class="s2">&quot;resume&quot;</span><span class="p">];</span><span class="k">return</span> <span class="nx">v</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">emit</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)})}),</span><span class="nx">d</span><span class="p">.</span><span class="nx">_read</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">resume</span><span class="p">())},</span><span class="nx">d</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">_fromList</span><span class="o">=</span><span class="nx">t</span><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;/Users/harth/repos/brain/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js&quot;</span><span class="p">))},{</span><span class="s2">&quot;./index.js&quot;</span><span class="o">:</span><span class="mi">12</span><span class="p">,</span><span class="s2">&quot;/Users/harth/repos/brain/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js&quot;</span><span class="o">:</span><span class="mi">10</span><span class="p">,</span><span class="nx">buffer</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span><span class="nx">events</span><span class="o">:</span><span class="mi">9</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">,</span><span class="s2">&quot;process/browser.js&quot;</span><span class="o">:</span><span class="mi">13</span><span class="p">,</span><span class="nx">string_decoder</span><span class="o">:</span><span class="mi">18</span><span class="p">}],</span><span class="mi">16</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">afterTransform</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="k">this</span><span class="p">.</span><span class="nx">needTransform</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">transforming</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">writecb</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">writechunk</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_transformState</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">transforming</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">writecb</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;no writecb in Transform class&quot;</span><span class="p">));</span><span class="nx">d</span><span class="p">.</span><span class="nx">writechunk</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">writecb</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">reading</span><span class="o">=!</span><span class="mi">1</span><span class="p">,(</span><span class="nx">f</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_read</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_transformState</span><span class="o">=</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">_flush</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_flush</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)})</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">)})}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_writableState</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_transformState</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;calling transform done when ws.length != 0&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">transforming</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;calling transform done when still transforming&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./duplex.js&quot;</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_transformState</span><span class="p">.</span><span class="nx">needTransform</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_transform</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;not implemented&quot;</span><span class="p">)},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_transformState</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">writecb</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">writechunk</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">writeencoding</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">transforming</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_readableState</span><span class="p">;(</span><span class="nx">d</span><span class="p">.</span><span class="nx">needTransform</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">needReadable</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_read</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">)}},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_read</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_transformState</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">writechunk</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">writecb</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">transforming</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">transforming</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_transform</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">writechunk</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeencoding</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">afterTransform</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">needTransform</span><span class="o">=!</span><span class="mi">0</span><span class="p">}},{</span><span class="s2">&quot;./duplex.js&quot;</span><span class="o">:</span><span class="mi">11</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">}],</span><span class="mi">17</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">chunk</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">16384</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">=!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">objectMode</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="o">=~~</span><span class="k">this</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">needDrain</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ending</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ended</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">finished</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">decodeStrings</span><span class="o">===!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">decodeStrings</span><span class="o">=!</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultEncoding</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">defaultEncoding</span><span class="o">||</span><span class="s2">&quot;utf8&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">writing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bufferProcessing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onwrite</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">m</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="k">this</span><span class="p">.</span><span class="nx">writecb</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">writelen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="p">[]}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="o">||</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Duplex</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_writableState</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">writable</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">void</span> <span class="nx">w</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">))</span><span class="o">:</span><span class="k">new</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;write after end&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">x</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">c</span><span class="p">(</span><span class="nx">d</span><span class="p">)})}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">y</span><span class="p">.</span><span class="nx">isBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;Invalid non-string/buffer chunk&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">x</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">(</span><span class="nx">f</span><span class="p">)}),</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">decodeStrings</span><span class="o">===!</span><span class="mi">1</span><span class="o">||</span><span class="s2">&quot;string&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">y</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)),</span><span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">+=</span><span class="nx">g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">highWaterMark</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">needDrain</span><span class="o">=!</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">writing</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">))</span><span class="o">:</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">i</span><span class="p">}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">writelen</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">writecb</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">writing</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_write</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">onwrite</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">sync</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">c</span><span class="o">?</span><span class="nx">x</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">(</span><span class="nx">d</span><span class="p">)})</span><span class="o">:</span><span class="nx">e</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">writing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writecb</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">writelen</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">writelen</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_writableState</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">sync</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">writecb</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="p">)</span><span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">f</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">bufferProcessing</span><span class="o">||!</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">?</span><span class="nx">x</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">)})</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">c</span><span class="o">||</span><span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="p">(),</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">needDrain</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">needDrain</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;drain&quot;</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferProcessing</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">chunk</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">encoding</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">callback</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">objectMode</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">writing</span><span class="p">){</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferProcessing</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ending</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">finished</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">writing</span><span class="p">}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">finished</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">)),</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">ending</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">finished</span><span class="o">?</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s2">&quot;finish&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">ended</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">WritableState</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">Uint8Array</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">Uint8Array</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span><span class="o">&amp;&amp;</span><span class="s2">&quot;Uint8Array&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span><span class="p">},</span><span class="nx">u</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">ArrayBuffer</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">ArrayBuffer</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span><span class="o">&amp;&amp;</span><span class="s2">&quot;ArrayBuffer&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span><span class="p">},</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;inherits&quot;</span><span class="p">),</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;./index.js&quot;</span><span class="p">),</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;process/browser.js&quot;</span><span class="p">).</span><span class="nx">nextTick</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;buffer&quot;</span><span class="p">).</span><span class="nx">Buffer</span><span class="p">;</span><span class="nx">v</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">w</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pipe</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Cannot pipe. Not readable.&quot;</span><span class="p">))},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_writableState</span><span class="p">,</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">),</span><span class="o">!</span><span class="nx">y</span><span class="p">.</span><span class="nx">isBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">Uint8Array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">y</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">a</span><span class="p">))),</span><span class="nx">y</span><span class="p">.</span><span class="nx">isBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;buffer&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaultEncoding</span><span class="p">),</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}),</span><span class="nx">d</span><span class="p">.</span><span class="nx">ended</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)),</span><span class="nx">e</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;not implemented&quot;</span><span class="p">))},</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_writableState</span><span class="p">;</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">),</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">ending</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">finished</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">)}},{</span><span class="s2">&quot;./index.js&quot;</span><span class="o">:</span><span class="mi">12</span><span class="p">,</span><span class="nx">buffer</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span><span class="nx">inherits</span><span class="o">:</span><span class="mi">19</span><span class="p">,</span><span class="s2">&quot;process/browser.js&quot;</span><span class="o">:</span><span class="mi">13</span><span class="p">}],</span><span class="mi">18</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isEncoding</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Unknown encoding: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">%</span><span class="mi">2</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">%</span><span class="mi">3</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;buffer&quot;</span><span class="p">).</span><span class="nx">Buffer</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">StringDecoder</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="s2">&quot;utf8&quot;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[-_]/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="p">){</span><span class="k">case</span><span class="s2">&quot;utf8&quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">surrogateSize</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;ucs2&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;utf16le&quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">surrogateSize</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">detectIncompleteChar</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;base64&quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">surrogateSize</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">detectIncompleteChar</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="nx">e</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="o">=</span><span class="k">new</span> <span class="nx">h</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="nx">i</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">write</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="p">;){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">+=</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="p">)</span><span class="k">return</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">55296</span><span class="o">&amp;&amp;</span><span class="mi">56319</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">surrogateSize</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">detectIncompleteChar</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">-=</span><span class="nx">f</span><span class="p">),</span><span class="nx">b</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">55296</span><span class="o">&amp;&amp;</span><span class="mi">56319</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">surrogateSize</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">+=</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="o">+=</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">i</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">detectIncompleteChar</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">3</span><span class="o">?</span><span class="mi">3</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">--</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&gt;&gt;</span><span class="mi">5</span><span class="o">==</span><span class="mi">6</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">&gt;=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="o">==</span><span class="mi">14</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">&gt;=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="o">==</span><span class="mi">30</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">charLength</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">i</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">charReceived</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">charBuffer</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">encoding</span><span class="p">;</span><span class="nx">b</span><span class="o">+=</span><span class="nx">d</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">}},{</span><span class="nx">buffer</span><span class="o">:</span><span class="mi">6</span><span class="p">}],</span><span class="mi">19</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">super_</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,{</span><span class="nx">constructor</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">enumerable</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">writable</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:!</span><span class="mi">0</span><span class="p">}})}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">super_</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">a</span><span class="p">}},{}],</span><span class="mi">20</span><span class="o">:</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{},</span><span class="nx">f</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">slice</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">concat</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">toString</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">forEach</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">reduce</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">every</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">some</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">bind</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">z</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">z</span><span class="o">?</span><span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wrapped</span><span class="o">=</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">z</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">_</span><span class="o">=</span><span class="nx">z</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">_</span><span class="o">=</span><span class="nx">z</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">VERSION</span><span class="o">=</span><span class="s2">&quot;1.6.0&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">A</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">each</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">forEach</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">forEach</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">===+</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">]],</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">z</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">collect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">===</span><span class="nx">o</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">))}),</span><span class="nx">d</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">B</span><span class="o">=</span><span class="s2">&quot;Reduce of empty array with no initial value&quot;</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">reduce</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">foldl</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">inject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">[]),</span><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduce</span><span class="o">===</span><span class="nx">p</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)),</span><span class="nx">e</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">e</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}),</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">B</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">reduceRight</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">foldr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">[]),</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduceRight</span><span class="o">===</span><span class="nx">q</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)),</span><span class="nx">e</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">!==+</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="o">?</span><span class="nx">g</span><span class="p">[</span><span class="o">--</span><span class="nx">f</span><span class="p">]</span><span class="o">:--</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}),</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">B</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">find</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">detect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="nx">C</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}),</span><span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">filter</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">select</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">filter</span><span class="o">===</span><span class="nx">r</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}),</span><span class="nx">d</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">reject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)},</span><span class="nx">c</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">every</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">all</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">every</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">))</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">e</span><span class="p">}),</span><span class="o">!!</span><span class="nx">d</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">C</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">some</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">any</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">some</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">))</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}),</span><span class="o">!!</span><span class="nx">d</span><span class="p">)};</span><span class="nx">z</span><span class="p">.</span><span class="nx">contains</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">include</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">u</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">===</span><span class="nx">u</span><span class="o">?-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">C</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">})},</span><span class="nx">z</span><span class="p">.</span><span class="nx">invoke</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">d</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]).</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)})},</span><span class="nx">z</span><span class="p">.</span><span class="nx">pluck</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="nx">b</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">where</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">matches</span><span class="p">(</span><span class="nx">b</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">findWhere</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">matches</span><span class="p">(</span><span class="nx">b</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">max</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===+</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">65535</span><span class="p">)</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=-</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=-</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="nx">h</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">)}),</span><span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">min</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===+</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">65535</span><span class="p">)</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">)}),</span><span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">shuffle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="nx">c</span><span class="o">++</span><span class="p">),</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}),</span><span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">sample</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">!==+</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="nx">a</span><span class="p">[</span><span class="nx">z</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)])</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">shuffle</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">))};</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">z</span><span class="p">.</span><span class="nx">sortBy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="nx">D</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">z</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">criteria</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}).</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">criteria</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">criteria</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">!==</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">}),</span><span class="s2">&quot;value&quot;</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">E</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="nx">D</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">A</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="p">)}),</span><span class="nx">e</span><span class="p">}};</span><span class="nx">z</span><span class="p">.</span><span class="nx">groupBy</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="nx">c</span><span class="p">]}),</span><span class="nx">z</span><span class="p">.</span><span class="nx">indexBy</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}),</span><span class="nx">z</span><span class="p">.</span><span class="nx">countBy</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">++:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">}),</span><span class="nx">z</span><span class="p">.</span><span class="nx">sortedIndex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">D</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">;){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="nx">g</span><span class="o">&gt;&gt;&gt;</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">])</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">toArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">===+</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="p">)</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="p">[]},</span><span class="nx">z</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">===+</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">first</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">head</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">take</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">initial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">b</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">last</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">rest</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">tail</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">drop</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">b</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">compact</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">F</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">)</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArguments</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}),</span><span class="nx">c</span><span class="p">)};</span><span class="nx">z</span><span class="p">.</span><span class="nx">flatten</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,[])},</span><span class="nx">z</span><span class="p">.</span><span class="nx">without</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">difference</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">partition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){(</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">d</span><span class="p">).</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}),[</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">]},</span><span class="nx">z</span><span class="p">.</span><span class="nx">uniq</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">unique</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=!</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[];</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){(</span><span class="nx">b</span><span class="o">?</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">===</span><span class="nx">c</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">))</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]))}),</span><span class="nx">f</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">union</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">flatten</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">intersection</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)})})},</span><span class="nx">z</span><span class="p">.</span><span class="nx">difference</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">z</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)})},</span><span class="nx">z</span><span class="p">.</span><span class="nx">zip</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="s2">&quot;length&quot;</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">{},</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">?</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">sortedIndex</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="nx">d</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">===</span><span class="nx">u</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="o">===</span><span class="nx">v</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">range</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;=</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">((</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">),</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;)</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="o">+=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">z</span><span class="p">.</span><span class="nx">bind</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">bind</span><span class="o">===</span><span class="nx">y</span><span class="p">)</span><span class="k">return</span> <span class="nx">y</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span><span class="nx">G</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">G</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span><span class="k">return</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">e</span><span class="p">}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">partial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">===</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">c</span><span class="o">++</span><span class="p">]);</span><span class="k">for</span><span class="p">(;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">c</span><span class="o">++</span><span class="p">]);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">bindAll</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;bindAll must be passed function names&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">)}),</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">memoize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">{};</span><span class="k">return</span> <span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="p">),</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">?</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">delay</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="k">return</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">b</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">defer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">delay</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">z</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">)))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">throttle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">leading</span><span class="o">===!</span><span class="mi">1</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span><span class="nx">h</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">leading</span><span class="o">!==!</span><span class="mi">1</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">);</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="p">(</span><span class="nx">j</span><span class="o">-</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">trailing</span><span class="o">===!</span><span class="mi">1</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">k</span><span class="p">)),</span><span class="nx">f</span><span class="p">}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">debounce</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">j</span><span class="o">?</span><span class="nx">d</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">))};</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">arguments</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">)),</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">),</span><span class="nx">h</span><span class="p">}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">once</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">c</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">)}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">wrap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">compose</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">arguments</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">arguments</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">)];</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">after</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">--</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">z</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="k">return</span> <span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">values</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]];</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">pairs</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]]];</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">invert</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]]]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">functions</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">methods</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">sort</span><span class="p">()},</span><span class="nx">z</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]}),</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">pick</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">])}),</span><span class="nx">b</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">omit</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">z</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">defaults</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">A</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">])}),</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">tap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">};</span><span class="kd">var</span> <span class="nx">H</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">||</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="o">==</span><span class="mi">1</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="o">||</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_wrapped</span><span class="p">),</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_wrapped</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">!=</span><span class="nx">l</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">case</span><span class="s2">&quot;[object String]&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">==</span><span class="nb">String</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">case</span><span class="s2">&quot;[object Number]&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">!=+</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="o">!=+</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="o">==</span><span class="mi">1</span><span class="o">/</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="o">==+</span><span class="nx">b</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;[object Date]&quot;</span><span class="o">:</span><span class="k">case</span><span class="s2">&quot;[object Boolean]&quot;</span><span class="o">:</span><span class="k">return</span><span class="o">+</span><span class="nx">a</span><span class="o">==+</span><span class="nx">b</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;[object RegExp]&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">source</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">global</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">global</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiline</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiline</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="s2">&quot;object&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">--</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">==</span><span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">constructor</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">!==</span><span class="nx">h</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&quot;constructor&quot;</span><span class="k">in</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;constructor&quot;</span><span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;[object Array]&quot;</span><span class="o">==</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(;</span><span class="nx">i</span><span class="o">--&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)););}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">++</span><span class="p">,</span><span class="o">!</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">k</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">))))</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">k</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">j</span><span class="o">=!</span><span class="nx">i</span><span class="p">}}</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span><span class="nx">d</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span><span class="nx">j</span><span class="p">};</span><span class="nx">z</span><span class="p">.</span><span class="nx">isEqual</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,[],[])},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isEmpty</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="nx">z</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isElement</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="o">||</span><span class="mi">1</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArray</span><span class="o">=</span><span class="nx">w</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;[object Array]&quot;</span><span class="o">==</span><span class="nx">l</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">===</span><span class="nb">Object</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">A</span><span class="p">([</span><span class="s2">&quot;Arguments&quot;</span><span class="p">,</span><span class="s2">&quot;Function&quot;</span><span class="p">,</span><span class="s2">&quot;String&quot;</span><span class="p">,</span><span class="s2">&quot;Number&quot;</span><span class="p">,</span><span class="s2">&quot;Date&quot;</span><span class="p">,</span><span class="s2">&quot;RegExp&quot;</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">z</span><span class="p">[</span><span class="s2">&quot;is&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">}}),</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArguments</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">isArguments</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="o">||!</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;callee&quot;</span><span class="p">))}),</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span><span class="sr">/./</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">}),</span><span class="nx">z</span><span class="p">.</span><span class="nb">isFinite</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nb">isNaN</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!=+</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isBoolean</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">===!</span><span class="mi">0</span><span class="o">||</span><span class="nx">a</span><span class="o">===!</span><span class="mi">1</span><span class="o">||</span><span class="s2">&quot;[object Boolean]&quot;</span><span class="o">==</span><span class="nx">l</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isNull</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">isUndefined</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">has</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">z</span><span class="p">.</span><span class="nx">noConflict</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">identity</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">constant</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">property</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">matches</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">!==</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">])</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}},</span><span class="nx">z</span><span class="p">.</span><span class="nx">times</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">)),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">random</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">a</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">))},</span><span class="nx">z</span><span class="p">.</span><span class="nx">now</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="o">||</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()};</span><span class="kd">var</span> <span class="nx">I</span><span class="o">=</span><span class="p">{</span><span class="nx">escape</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;&amp;&quot;</span><span class="o">:</span><span class="s2">&quot;&amp;amp;&quot;</span><span class="p">,</span><span class="s2">&quot;&lt;&quot;</span><span class="o">:</span><span class="s2">&quot;&amp;lt;&quot;</span><span class="p">,</span><span class="s2">&quot;&gt;&quot;</span><span class="o">:</span><span class="s2">&quot;&amp;gt;&quot;</span><span class="p">,</span><span class="s1">&#39;&quot;&#39;</span><span class="o">:</span><span class="s2">&quot;&amp;quot;&quot;</span><span class="p">,</span><span class="s2">&quot;&#39;&quot;</span><span class="o">:</span><span class="s2">&quot;&amp;#x27;&quot;</span><span class="p">}};</span><span class="nx">I</span><span class="p">.</span><span class="nx">unescape</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">invert</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">escape</span><span class="p">);</span><span class="kd">var</span> <span class="nx">J</span><span class="o">=</span><span class="p">{</span><span class="nx">escape</span><span class="o">:</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;[&quot;</span><span class="o">+</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">escape</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="nx">unescape</span><span class="o">:</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="nx">z</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">unescape</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">)};</span><span class="nx">z</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span><span class="s2">&quot;escape&quot;</span><span class="p">,</span><span class="s2">&quot;unescape&quot;</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">z</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">J</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">I</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">b</span><span class="p">]})}}),</span><span class="nx">z</span><span class="p">.</span><span class="nx">result</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">return</span> <span class="nx">z</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">mixin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">A</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">functions</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">_wrapped</span><span class="p">];</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">O</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="p">))}})};</span><span class="kd">var</span> <span class="nx">K</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">uniqueId</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=++</span><span class="nx">K</span><span class="o">+</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">templateSettings</span><span class="o">=</span><span class="p">{</span><span class="nx">evaluate</span><span class="o">:</span><span class="sr">/&lt;%([\s\S]+?)%&gt;/g</span><span class="p">,</span><span class="nx">interpolate</span><span class="o">:</span><span class="sr">/&lt;%=([\s\S]+?)%&gt;/g</span><span class="p">,</span><span class="nx">escape</span><span class="o">:</span><span class="sr">/&lt;%-([\s\S]+?)%&gt;/g</span><span class="p">};</span><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="sr">/(.)^/</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;&#39;&quot;</span><span class="o">:</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span><span class="s2">&quot;\\&quot;</span><span class="o">:</span><span class="s2">&quot;\\&quot;</span><span class="p">,</span><span class="s2">&quot;\r&quot;</span><span class="o">:</span><span class="s2">&quot;r&quot;</span><span class="p">,</span><span class="s2">&quot;\n&quot;</span><span class="o">:</span><span class="s2">&quot;n&quot;</span><span class="p">,</span><span class="s2">&quot;	&quot;</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="s2">&quot;\u2028&quot;</span><span class="o">:</span><span class="s2">&quot;u2028&quot;</span><span class="p">,</span><span class="s2">&quot;\u2029&quot;</span><span class="o">:</span><span class="s2">&quot;u2029&quot;</span><span class="p">},</span><span class="nx">N</span><span class="o">=</span><span class="sr">/\\|&#39;|\r|\n|\t|\u2028|\u2029/g</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">template</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({},</span><span class="nx">c</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">templateSettings</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">([(</span><span class="nx">c</span><span class="p">.</span><span class="nx">escape</span><span class="o">||</span><span class="nx">L</span><span class="p">).</span><span class="nx">source</span><span class="p">,(</span><span class="nx">c</span><span class="p">.</span><span class="nx">interpolate</span><span class="o">||</span><span class="nx">L</span><span class="p">).</span><span class="nx">source</span><span class="p">,(</span><span class="nx">c</span><span class="p">.</span><span class="nx">evaluate</span><span class="o">||</span><span class="nx">L</span><span class="p">).</span><span class="nx">source</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;|$&quot;</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;__p+=&#39;&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">return</span> <span class="nx">g</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">N</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;\\&quot;</span><span class="o">+</span><span class="nx">M</span><span class="p">[</span><span class="nx">a</span><span class="p">]}),</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">+=</span><span class="s2">&quot;&#39;+\n((__t=(&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot;))==null?&#39;&#39;:_.escape(__t))+\n&#39;&quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">+=</span><span class="s2">&quot;&#39;+\n((__t=(&quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot;))==null?&#39;&#39;:__t)+\n&#39;&quot;</span><span class="p">),</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">+=</span><span class="s2">&quot;&#39;;\n&quot;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;\n__p+=&#39;&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">b</span><span class="p">}),</span><span class="nx">g</span><span class="o">+=</span><span class="s2">&quot;&#39;;\n&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">variable</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;with(obj||{}){\n&quot;</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;}\n&quot;</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;var __t,__p=&#39;&#39;,__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,&#39;&#39;);};\n&quot;</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;return __p;\n&quot;</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">variable</span><span class="o">||</span><span class="s2">&quot;obj&quot;</span><span class="p">,</span><span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">throw</span> <span class="nx">h</span><span class="p">.</span><span class="nx">source</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">z</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">)};</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">source</span><span class="o">=</span><span class="s2">&quot;function(&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">variable</span><span class="o">||</span><span class="s2">&quot;obj&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;){\n&quot;</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">},</span><span class="nx">z</span><span class="p">.</span><span class="nx">chain</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">chain</span><span class="p">()};</span><span class="kd">var</span> <span class="nx">O</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_chain</span><span class="o">?</span><span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">chain</span><span class="p">()</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">z</span><span class="p">.</span><span class="nx">mixin</span><span class="p">(</span><span class="nx">z</span><span class="p">),</span><span class="nx">A</span><span class="p">([</span><span class="s2">&quot;pop&quot;</span><span class="p">,</span><span class="s2">&quot;push&quot;</span><span class="p">,</span><span class="s2">&quot;reverse&quot;</span><span class="p">,</span><span class="s2">&quot;shift&quot;</span><span class="p">,</span><span class="s2">&quot;sort&quot;</span><span class="p">,</span><span class="s2">&quot;splice&quot;</span><span class="p">,</span><span class="s2">&quot;unshift&quot;</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_wrapped</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">arguments</span><span class="p">),</span><span class="s2">&quot;shift&quot;</span><span class="o">!=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;splice&quot;</span><span class="o">!=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="k">delete</span> <span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">O</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">)}}),</span><span class="nx">A</span><span class="p">([</span><span class="s2">&quot;concat&quot;</span><span class="p">,</span><span class="s2">&quot;join&quot;</span><span class="p">,</span><span class="s2">&quot;slice&quot;</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">O</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wrapped</span><span class="p">,</span><span class="nx">arguments</span><span class="p">))}}),</span><span class="nx">z</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,{</span><span class="nx">chain</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_chain</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">},</span><span class="nx">value</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_wrapped</span><span class="p">}}),</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;underscore&quot;</span><span class="p">,[],</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">z</span><span class="p">})}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)},{}]},{},[</span><span class="mi">1</span><span class="p">]);</span></div></pre></div></td>
          </tr>
        </table>
  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.04904s from github-fe117-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-remove-close close js-ajax-error-dismiss"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-5a921ce2c45d4a5235b8f9c5c716611df0a83a79.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-71380a7260f8593a61c90ab35f6f6cf70e28aaba.js" type="text/javascript"></script>
      
      
  </body>
</html>

